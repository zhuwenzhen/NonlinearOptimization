(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    105185,       2491]
NotebookOptionsPosition[    100210,       2362]
NotebookOutlinePosition[    100567,       2378]
CellTagsIndexPosition[    100524,       2375]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["MNIST Experiment", "Title",
 CellChangeTimes->{{3.715172687891287*^9, 3.715172698389805*^9}, {
  3.715239954265868*^9, 
  3.715239959228795*^9}},ExpressionUUID->"1ba24959-808c-4917-b6af-\
b94c65998d06"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"resource", "=", 
   RowBox[{"ResourceObject", "[", "\"\<MNIST\>\"", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TrainingData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"resource", ",", "\"\<TestData\>\""}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.715170541604146*^9, 3.7151705544136047`*^9}, {
  3.715255565397772*^9, 
  3.715255572684186*^9}},ExpressionUUID->"2ff18562-a131-473c-994a-\
255e9b9f598e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "trainingData", "]"}]], "Input",
 CellChangeTimes->{{3.7151707243617487`*^9, 
  3.7151707283979*^9}},ExpressionUUID->"460753d9-6afe-4895-a6a9-01c83a2e4d4d"],

Cell[BoxData["60000"], "Output",
 CellChangeTimes->{{3.715170968264357*^9, 3.7151709683186903`*^9}, 
   3.715255762808848*^9},ExpressionUUID->"3ea55141-27a5-491f-9169-\
27f0f7523915"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pure Logistic", "Section",
 CellChangeTimes->{{3.715171871668045*^9, 
  3.7151718738869867`*^9}},ExpressionUUID->"c99656b4-f1a6-463e-b2ee-\
f73835da71d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data1000", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"trainingData", ",", "2000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7151719203086243`*^9, 3.715171973894311*^9}, {
   3.715172150987419*^9, 3.715172152981382*^9}, {3.7152399900558147`*^9, 
   3.7152399904149437`*^9}, 
   3.715255773272005*^9},ExpressionUUID->"52960ca5-674a-43bf-8095-\
10f58d21bbbd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"logit", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data1000", ",", 
    RowBox[{"Method", "\[Rule]", " ", "\"\<LogisticRegression\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7151719527988*^9, 3.715171979803794*^9}, {
   3.7151721263881283`*^9, 3.7151721400515833`*^9}, 
   3.715172364111277*^9},ExpressionUUID->"9935c0ce-3b4c-4fa8-b2b9-\
49c2a3c9523a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Image\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Number of classes: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "0", "1", "2", "3", "4", "5", "6", "7", "8",
                     "9"}, "RowWithSeparators"], Short[#, 20]& ]], 
                    Annotation[#, 
                    Short[
                    Row[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, ","], 20], 
                    "Tooltip"]& ], "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 PointSize[0.13], 
                 GrayLevel[0.45], 
                 
                 PointBox[{{0.9821769431797024, -0.440194219686987}, {
                  1.1339776261519132`, 0.8056918676854272}, {
                  0.5279892326667741, 0.6574306661126254}, {
                  0.022147046479890797`, 1.4937877187998898`}}], 
                 GrayLevel[0.7], 
                 
                 PointBox[{{-0.9815166384819979, 
                  0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                 GrayLevel[0.55], 
                 AbsoluteThickness[1.5], 
                 LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
               Axes -> {False, False}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                  AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                Frame -> {{True, True}, {True, True}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  Thickness[Tiny], 
                  GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}},
                 GridLines -> {None, None}, 
                LabelStyle -> {FontFamily -> "Arial"}, 
                Method -> {"ScalingFunctions" -> None}, 
                PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
               ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}], Frame -> True, 
               FrameTicks -> None, FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
               GrayLevel[0.94]], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"Image\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Number of classes: \"", "SummaryItemAnnotation"],
                    "\[InvisibleSpace]", 
                   TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "0", "1", "2", "3", "4", "5", "6", "7", "8",
                     "9"}, "RowWithSeparators"], Short[#, 20]& ]], 
                    Annotation[#, 
                    Short[
                    Row[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, ","], 20], 
                    "Tooltip"]& ], "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox[
                   "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                   TagBox["2000", "SummaryItem"]}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.715171981510219*^9, {3.715172128033594*^9, 3.7151721407883472`*^9}, 
   3.715172365305147*^9, 3.715240001667769*^9, {3.715255766435315*^9, 
   3.715255777552444*^9}},ExpressionUUID->"9165e2be-ed70-463e-8e1f-\
d25291a0540c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.715240037692976*^9, 
  3.715240048314803*^9}},ExpressionUUID->"6acfb2e7-cedb-44d2-98e9-\
03691c7760a5"],

Cell[BoxData[
 RowBox[{"testData100", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"testData", ",", "100"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.71517214175786*^9, 3.7151721648328333`*^9}, 
   3.715172258914823*^9},ExpressionUUID->"b4f3c321-d6c1-4a2a-9545-\
8c9c7c2eecb7"],

Cell[BoxData[
 RowBox[{"predLabel", "=", 
  RowBox[{"logit", "[", 
   RowBox[{"Keys", "@", "testData100"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.715172166549263*^9, 
  3.715172187512261*^9}},ExpressionUUID->"cdb28671-62d6-4e00-89da-\
79eb039d9953"],

Cell[BoxData[
 RowBox[{"realLabel", "=", 
  RowBox[{"Values", "[", "testData100", "]"}]}]], "Input",
 CellChangeTimes->{{3.7151721910611763`*^9, 
  3.715172208812469*^9}},ExpressionUUID->"0090d20b-047e-4e9a-b405-\
4be3bdfaccf3"],

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Equal", ",", 
    RowBox[{"{", 
     RowBox[{"predLabel", ",", "realLabel"}], "}"}]}], "]"}], "]"}]], "Input",\

 CellChangeTimes->{{3.7151722165685463`*^9, 
  3.7151722182249823`*^9}},ExpressionUUID->"892c0e60-431a-4c9e-84e6-\
f133775a2959"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accuracy", "=", 
  RowBox[{
   FractionBox["90", "100"], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.715172221200138*^9, 3.715172232572991*^9}, {
  3.715172375196608*^9, 3.715172375885375*^9}, {3.715240014085206*^9, 
  3.715240015434936*^9}},ExpressionUUID->"ab724bb2-7872-4238-900a-\
62f1be4bf3cf"],

Cell[BoxData["0.9`"], "Output",
 CellChangeTimes->{{3.715172230748434*^9, 3.715172232988192*^9}, {
   3.715172373369475*^9, 3.715172376051269*^9}, 
   3.7152400158554173`*^9},ExpressionUUID->"fcbb1ddc-dc8c-4bbe-8262-\
b92ded014296"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using Lenet", "Section",
 CellChangeTimes->{{3.715239936753159*^9, 
  3.715239941333364*^9}},ExpressionUUID->"a20dc74b-4e3a-4508-82d9-\
dfb9cae77dd9"],

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingData", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.7151705610251417`*^9, 
  3.7151705610275583`*^9}},ExpressionUUID->"e182b713-1a82-41d0-8d8a-\
5c7c7958f8a9"],

Cell["\<\
Define a convolutional neural network that takes in 28*28 grayscale images as \
input.\
\>", "Text",
 CellChangeTimes->{{3.715170575626906*^9, 
  3.71517057863944*^9}},ExpressionUUID->"6a542fa5-26c6-4044-8513-\
0c60cce67997"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lenet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "5"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", "5"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "500", ",", "Ramp", ",", "10", 
      ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"28", ",", "28"}], "}"}], ",", "\"\<Grayscale\>\""}], "}"}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7151705674444304`*^9, 
  3.715170567445815*^9}},ExpressionUUID->"f9508ed8-d912-4a4e-965f-\
ce583c863d9b"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{20, 1, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {20, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
           "3" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 20, "$InputSize" -> {24, 24}, 
               "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 12, 12}, NeuralNetworks`RealT]]], 
           "4" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{50, 20, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               20, "$GroupNumber" -> 1, "$InputSize" -> {12, 12}, 
               "$OutputSize" -> {8, 8}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 12, 12}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
           "5" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {50, 8, 8}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 8, 8}, NeuralNetworks`RealT]]], 
           "6" -> Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 50, "$InputSize" -> {8, 8}, 
               "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{50, 4, 4}, NeuralNetworks`RealT]]], 
           "7" -> Association[
            "Type" -> "Flatten", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Level" -> DirectedInfinity[1], "OutputSize" -> {800}, 
               "$InputSize" -> {50, 4, 4}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{50, 4, 4}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]]], "8" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{500, 800}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {500}, "$OutputSize" -> 500, "$InputSize" -> 
               800, "$InputDimensions" -> {800}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{800}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "9" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], "10" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               500, "$InputDimensions" -> {500}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "11" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
              "ColorChannels" -> 1, "MeanImage" -> None], 
             NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
             
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"12\"", "\"12\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"8\"", "\"8\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"50\"", "\"4\"", "\"4\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"800\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{244., {106.4169921875, 111.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7151705889320374`*^9},ExpressionUUID->"2a6aa167-9548-49b2-a32d-\
042d5f6bf5cb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"lenet", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"lenet", ",", "trainingData", ",", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "3"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.7151705983561487`*^9, 
  3.715170598357501*^9}},ExpressionUUID->"0f39b875-1117-4a08-a314-\
6ffcfbd404a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"predictedLabel", "=", 
  RowBox[{"lenet", "/@", 
   RowBox[{"(", 
    RowBox[{"Keys", "@", "testData"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.715171271207204*^9, 3.715171302782297*^9}, {
  3.715239946602268*^9, 
  3.71523995070893*^9}},ExpressionUUID->"e7dffc77-2cb8-4a33-aa54-\
2beae418add8"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", 
           TemplateBox[{"9826"},
            "OutputSizeLimit`Skeleton"], ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "8", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "7", ",", "7", ",", "9", ",", "9", ",", "9", 
           ",", "7", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 14, 16011002778922443080, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 14, 16011002778922443080, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 14, 16011002778922443080, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[16011002778922443080 === $SessionID, 
   Out[14], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{{3.715171283808556*^9, 3.715171304721273*^9}, 
   3.715171356058282*^9},ExpressionUUID->"e9d0031f-bde0-4c18-b5c6-\
342a957b1d48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"realLabel", "=", 
  RowBox[{"Values", "[", "testData", "]"}]}]], "Input",
 CellChangeTimes->{{3.71517135831581*^9, 
  3.7151713722337227`*^9}},ExpressionUUID->"a2be2521-38f5-46fa-9d51-\
e5df4bf15e4d"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", 
           TemplateBox[{"9826"},
            "OutputSizeLimit`Skeleton"], ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 16, 16011002778922443080, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 16, 16011002778922443080, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 16, 16011002778922443080, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[16011002778922443080 === $SessionID, 
   Out[16], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{{3.715171365136868*^9, 
  3.715171372556622*^9}},ExpressionUUID->"f929d5cb-0acf-47d5-bb9c-\
13baae50aa77"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Equal", ",", 
    RowBox[{"{", 
     RowBox[{"predictedLabel", ",", "realLabel"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.715171424438979*^9, 
  3.715171465311371*^9}},ExpressionUUID->"03d66a2a-6143-4a53-a75f-\
7320f93ca57c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"True", "\[Rule]", "9885"}], ",", 
   RowBox[{"False", "\[Rule]", "115"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.715171432182947*^9, 
  3.715171465553397*^9}},ExpressionUUID->"41d4a8f7-d3cd-4632-a4e2-\
103ba21e3c7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accuracy", "=", 
  RowBox[{
   FractionBox["9885", "10000"], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.7151714745990334`*^9, 3.715171503351281*^9}, {
  3.715171803071371*^9, 
  3.715171804556162*^9}},ExpressionUUID->"1b0e1f4c-d4ea-4689-9764-\
1cc3ca4188f8"],

Cell[BoxData["0.9885`"], "Output",
 CellChangeTimes->{{3.715171486730698*^9, 3.715171503774066*^9}, 
   3.715171805271367*^9},ExpressionUUID->"af1867b6-6e04-446c-b895-\
eb49df50e5d3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Naive CNN", "Section",
 CellChangeTimes->{{3.7151715624226923`*^9, 
  3.715171564402032*^9}},ExpressionUUID->"e0a36f6e-7b14-4c02-b1ba-\
f4fb9b2e9ae7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"naiveCNN", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "5"}], "]"}], ",", "10", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "9"}], "]"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"28", ",", "28"}], "}"}], ",", "\"\<Grayscale\>\""}], "}"}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7151705674444304`*^9, 3.715170567445815*^9}, {
  3.715171570703948*^9, 3.715171580453622*^9}, {3.715171621750051*^9, 
  3.7151716239684753`*^9}},ExpressionUUID->"7e7e0324-8353-439c-9e80-\
6938959718ee"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{20, 1, 5, 5}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               1, "$GroupNumber" -> 1, "$InputSize" -> {28, 28}, 
               "$OutputSize" -> {24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{20, 24, 24}, NeuralNetworks`RealT]]], 
           "2" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 11520}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               11520, "$InputDimensions" -> {20, 24, 24}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{20, 24, 24}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}, 
         "Inputs" -> Association["Input" -> NetEncoder["Image", 
             Association[
             "ImageSize" -> {28, 28}, "ColorSpace" -> "Grayscale", 
              "ColorChannels" -> 1, "MeanImage" -> None], 
             NeuralNetworks`TensorT[{1, 28, 28}, NeuralNetworks`RealT]]], 
         "Outputs" -> Association["Output" -> NetDecoder["Class", 
             Association[
             "Labels" -> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, "Dimensions" -> 10], 
             
             NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"20\"", "\"24\"", "\"24\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"class\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{239., {46.4169921875, 51.5830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.7151715820059433`*^9, 
  3.715171624641988*^9},ExpressionUUID->"daa54a04-b032-49a8-896d-\
1aa5dc11ec99"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"naiveCNN", ",", "trainingData", ",", 
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "3"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.7151705983561487`*^9, 3.715170598357501*^9}, {
  3.7151716127639103`*^9, 
  3.715171631424252*^9}},ExpressionUUID->"e39994aa-78de-47e1-83fc-\
4c2e9daf17b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"predictedLabel", "=", 
  RowBox[{"net", "/@", 
   RowBox[{"(", 
    RowBox[{"Keys", "@", "testData"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.715171271207204*^9, 3.715171302782297*^9}, {
  3.71517177310191*^9, 
  3.715171773686207*^9}},ExpressionUUID->"b8c5f09e-bfc9-4ede-bd08-\
b15302441d27"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "5", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "6", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", 
           TemplateBox[{"9826"},
            "OutputSizeLimit`Skeleton"], ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "4", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "3", ",", "9", ",", "7", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "4", ",", 
           "9", ",", "9", ",", "9", ",", "7", ",", "9", ",", "9", ",", "9", 
           ",", "7", ",", "9", ",", "9", ",", "9", ",", "8", ",", "4", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "4", ",", "9", 
           ",", "9", ",", "9", ",", "5", ",", "4", ",", "4", ",", "4", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 30, 16011002778922443080, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 30, 16011002778922443080, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 30, 16011002778922443080, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[16011002778922443080 === $SessionID, 
   Out[30], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{
  3.715171782646901*^9},ExpressionUUID->"d5ef57de-40ff-422b-841b-\
bc2e26d0f492"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"realLabel", "=", 
  RowBox[{"Values", "[", "testData", "]"}]}]], "Input",
 CellChangeTimes->{{3.71517135831581*^9, 
  3.7151713722337227`*^9}},ExpressionUUID->"8d6fff78-6fb1-40b7-bad2-\
8651f3d53b49"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
           "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
           ",", "0", ",", "0", ",", 
           TemplateBox[{"9826"},
            "OutputSizeLimit`Skeleton"], ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", 
           ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", 
           "9", ",", "9", ",", "9", ",", "9", ",", "9", ",", "9"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 31, 16011002778922443080, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 31, 16011002778922443080, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 31, 16011002778922443080, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[16011002778922443080 === $SessionID, 
   Out[31], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{
  3.715171784921122*^9},ExpressionUUID->"a010ca65-e1b3-4800-b1ee-\
2c17deeaddc0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Equal", ",", 
    RowBox[{"{", 
     RowBox[{"predictedLabel", ",", "realLabel"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.715171424438979*^9, 
  3.715171465311371*^9}},ExpressionUUID->"142627ab-2b63-4a05-b401-\
06d7807bef2a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"True", "\[Rule]", "9155"}], ",", 
   RowBox[{"False", "\[Rule]", "845"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.715171787162177*^9},ExpressionUUID->"9750464a-7e52-4b11-8dac-\
3de6dc19b825"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accuracy", "=", 
  RowBox[{
   FractionBox["9155", "10000"], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.7151714745990334`*^9, 3.715171503351281*^9}, {
  3.7151717899921837`*^9, 
  3.715171797445718*^9}},ExpressionUUID->"94b3c65f-6e2c-454e-ae5d-\
0971a68512a2"],

Cell[BoxData["0.9155`"], "Output",
 CellChangeTimes->{{3.7151717882774553`*^9, 
  3.7151717985449047`*^9}},ExpressionUUID->"9c28eef4-3beb-4da7-8f98-\
a93898a8c7ae"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{Automatic, 89}, {Automatic, 54}},
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 18, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 208, 4, 92, "Title", "ExpressionUUID" -> \
"1ba24959-808c-4917-b6af-b94c65998d06"],
Cell[791, 28, 645, 17, 75, "Input", "ExpressionUUID" -> \
"2ff18562-a131-473c-994a-255e9b9f598e"],
Cell[CellGroupData[{
Cell[1461, 49, 194, 3, 32, "Input", "ExpressionUUID" -> \
"460753d9-6afe-4895-a6a9-01c83a2e4d4d"],
Cell[1658, 54, 183, 3, 32, "Output", "ExpressionUUID" -> \
"3ea55141-27a5-491f-9169-27f0f7523915"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1878, 62, 160, 3, 64, "Section", "ExpressionUUID" -> \
"c99656b4-f1a6-463e-b2ee-f73835da71d2"],
Cell[2041, 67, 408, 9, 32, "Input", "ExpressionUUID" -> \
"52960ca5-674a-43bf-8095-10f58d21bbbd"],
Cell[CellGroupData[{
Cell[2474, 80, 390, 9, 32, "Input", "ExpressionUUID" -> \
"9935c0ce-3b4c-4fa8-b2b9-49c2a3c9523a"],
Cell[2867, 91, 9837, 201, 60, "Output", "ExpressionUUID" -> \
"9165e2be-ed70-463e-8e1f-d25291a0540c"]
}, Open  ]],
Cell[12719, 295, 152, 3, 32, "Input", "ExpressionUUID" -> \
"6acfb2e7-cedb-44d2-98e9-03691c7760a5"],
Cell[12874, 300, 281, 6, 32, "Input", "ExpressionUUID" -> \
"b4f3c321-d6c1-4a2a-9545-8c9c7c2eecb7"],
Cell[13158, 308, 252, 6, 32, "Input", "ExpressionUUID" -> \
"cdb28671-62d6-4e00-89da-79eb039d9953"],
Cell[13413, 316, 228, 5, 32, "Input", "ExpressionUUID" -> \
"0090d20b-047e-4e9a-b405-4be3bdfaccf3"],
Cell[13644, 323, 322, 9, 32, "Input", "ExpressionUUID" -> \
"892c0e60-431a-4c9e-84e6-f133775a2959"],
Cell[CellGroupData[{
Cell[13991, 336, 326, 7, 50, "Input", "ExpressionUUID" -> \
"ab724bb2-7872-4238-900a-62f1be4bf3cf"],
Cell[14320, 345, 232, 4, 32, "Output", "ExpressionUUID" -> \
"fcbb1ddc-dc8c-4bbe-8262-b92ded014296"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14601, 355, 156, 3, 64, "Section", "ExpressionUUID" -> \
"a20dc74b-4e3a-4508-82d9-dfb9cae77dd9"],
Cell[14760, 360, 229, 5, 32, "Input", "ExpressionUUID" -> \
"e182b713-1a82-41d0-8d8a-5c7c7958f8a9"],
Cell[14992, 367, 235, 6, 30, "Text", "ExpressionUUID" -> \
"6a542fa5-26c6-4044-8513-0c60cce67997"],
Cell[CellGroupData[{
Cell[15252, 377, 1243, 32, 54, "Input", "ExpressionUUID" -> \
"f9508ed8-d912-4a4e-965f-ce583c863d9b"],
Cell[16498, 411, 28089, 588, 254, "Output", "ExpressionUUID" -> \
"2a6aa167-9548-49b2-a32d-042d5f6bf5cb"]
}, Open  ]],
Cell[44602, 1002, 396, 10, 32, "Input", "ExpressionUUID" -> \
"0f39b875-1117-4a08-a314-6ffcfbd404a8"],
Cell[CellGroupData[{
Cell[45023, 1016, 323, 8, 32, "Input", "ExpressionUUID" -> \
"e7dffc77-2cb8-4a33-aa54-2beae418add8"],
Cell[45349, 1026, 9621, 229, 140, "Output", "ExpressionUUID" -> \
"e9d0031f-bde0-4c18-b5c6-342a957b1d48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55007, 1260, 224, 5, 32, "Input", "ExpressionUUID" -> \
"a2be2521-38f5-46fa-9d51-e5df4bf15e4d"],
Cell[55234, 1267, 9598, 229, 140, "Output", "ExpressionUUID" -> \
"f929d5cb-0acf-47d5-bb9c-13baae50aa77"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64869, 1501, 324, 9, 32, "Input", "ExpressionUUID" -> \
"03d66a2a-6143-4a53-a75f-7320f93ca57c"],
Cell[65196, 1512, 306, 7, 35, "Output", "ExpressionUUID" -> \
"41d4a8f7-d3cd-4632-a4e2-103ba21e3c7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65539, 1524, 286, 7, 50, "Input", "ExpressionUUID" -> \
"1b0e1f4c-d4ea-4689-9764-1cc3ca4188f8"],
Cell[65828, 1533, 183, 3, 32, "Output", "ExpressionUUID" -> \
"af1867b6-6e04-446c-b895-eb49df50e5d3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[66060, 1542, 156, 3, 64, "Section", "ExpressionUUID" -> \
"e0a36f6e-7b14-4c02-b1ba-f4fb9b2e9ae7"],
Cell[CellGroupData[{
Cell[66241, 1549, 989, 25, 32, "Input", "ExpressionUUID" -> \
"7e7e0324-8353-439c-9e80-6938959718ee"],
Cell[67233, 1576, 11527, 242, 134, "Output", "ExpressionUUID" -> \
"daa54a04-b032-49a8-896d-1aa5dc11ec99"]
}, Open  ]],
Cell[78775, 1821, 448, 11, 32, "Input", "ExpressionUUID" -> \
"e39994aa-78de-47e1-83fc-4c2e9daf17b7"],
Cell[CellGroupData[{
Cell[79248, 1836, 321, 8, 32, "Input", "ExpressionUUID" -> \
"b8c5f09e-bfc9-4ede-bd08-b15302441d27"],
Cell[79572, 1846, 9622, 230, 140, "Output", "ExpressionUUID" -> \
"d5ef57de-40ff-422b-841b-bc2e26d0f492"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89231, 2081, 224, 5, 32, "Input", "ExpressionUUID" -> \
"8d6fff78-6fb1-40b7-bad2-8651f3d53b49"],
Cell[89458, 2088, 9574, 229, 140, "Output", "ExpressionUUID" -> \
"a010ca65-e1b3-4800-b1ee-2c17deeaddc0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[99069, 2322, 324, 9, 32, "Input", "ExpressionUUID" -> \
"142627ab-2b63-4a05-b401-06d7807bef2a"],
Cell[99396, 2333, 282, 7, 35, "Output", "ExpressionUUID" -> \
"9750464a-7e52-4b11-8dac-3de6dc19b825"]
}, Open  ]],
Cell[CellGroupData[{
Cell[99715, 2345, 288, 7, 50, "Input", "ExpressionUUID" -> \
"94b3c65f-6e2c-454e-ae5d-0971a68512a2"],
Cell[100006, 2354, 164, 3, 32, "Output", "ExpressionUUID" -> \
"9c28eef4-3beb-4da7-8f98-a93898a8c7ae"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

